diff --git a/app/Http/Controllers/LeaveTypeController.php b/app/Http/Controllers/LeaveTypeController.php
index 2e8f1ab..7e5b2b4 100644
--- a/app/Http/Controllers/LeaveTypeController.php
+++ b/app/Http/Controllers/LeaveTypeController.php
@@ -1,18 +1,22 @@
 <?php
 
 namespace App\Http\Controllers;
 
 use App\Models\Business;
 use App\Models\LeaveType;
 use App\Models\Department;
 use App\Models\JobCategory;
+use App\Models\LeavePolicy;
 use Illuminate\Http\Request;
 use App\Http\RequestResponse;
 use App\Traits\HandleTransactions;
 use Illuminate\Support\Facades\Log;
 use Illuminate\Validation\Rule;
 use Illuminate\Support\Str;
+use Illuminate\Support\Facades\DB;
 
 
 
 class LeaveTypeController extends Controller
 {
     use HandleTransactions;
@@ -28,17 +32,29 @@ class LeaveTypeController extends Controller
         return RequestResponse::ok('Leave types fetched successfully.', $leaveTypesTable);
     }
 
     public function store(Request $request)
     {
         Log::debug('LeaveType store payload', $request->all());
 
         $validated = $request->validate([
-            'name'                              => 'required|string|max:255',
+            'name'                              => [
+                'required','string','max:255',
+                // prevent duplicates per business
+                Rule::unique('leave_types','name')->where(function($q){
+                    $biz = Business::findBySlug(session('active_business_slug'));
+                    return $q->where('business_id', optional($biz)->id);
+                })
+            ],
             'description'                       => 'nullable|string',
             'requires_approval'                 => 'required|boolean',
             'is_paid'                           => 'required|boolean',
             'allowance_accruable'               => 'required|boolean',
             'allows_half_day'                   => 'required|boolean',
             'requires_attachment'               => 'required|boolean',
             'max_continuous_days'               => 'nullable|integer',
             'min_notice_days'                   => 'required|integer',
             'department'                        => 'required|string',
             'job_category'                      => 'required|string',
             'gender_applicable'                 => 'required|string|in:all,male,female',
             'prorated_for_new_employees'        => 'required|boolean',
             'default_days'                      => 'required|integer',
             'accrual_frequency'                 => 'required|string|in:monthly,quarterly,yearly',
             'accrual_amount'                    => 'required|numeric|min:0',
             'max_carryover_days'                => 'required|integer',
             'minimum_service_days_required'     => 'required|integer',
-            'effective_date'                    => 'required|date',
-            'end_date'                          => 'nullable|date',
+            'effective_date'                    => 'required|date',
+            'end_date'                          => 'nullable|date|after_or_equal:effective_date',
             // governance/flow fields
             'allows_backdating'                 => 'required|boolean',
             'approval_levels'                   => 'required|integer|min:0',
             'excluded_days'                     => 'nullable|array',
             'excluded_days.*'                   => 'in:monday,tuesday,wednesday,thursday,friday,saturday,sunday',
             'is_stepwise'                       => 'required|boolean',
             'stepwise_rules'                    => 'nullable|array',
         ]);
 
         return $this->handleTransaction(function () use ($validated) {
             $business = Business::findBySlug(session('active_business_slug'));
 
-            $leaveType = $business->leaveTypes()->create([
+            $leaveType = $business->leaveTypes()->create([
                 'name'                => $validated['name'],
                 'description'         => $validated['description'] ?? null,
                 'requires_approval'   => $validated['requires_approval'],
                 'is_paid'             => $validated['is_paid'],
                 'allowance_accruable' => $validated['allowance_accruable'],
                 'allows_half_day'     => $validated['allows_half_day'],
                 'requires_attachment' => $validated['requires_attachment'],
                 'max_continuous_days' => $validated['max_continuous_days'] ?? null,
                 'min_notice_days'     => $validated['min_notice_days'],
                 'is_active'           => true,
                 // governance/flow fields
                 'allows_backdating'   => $validated['allows_backdating'],
                 'approval_levels'     => $validated['approval_levels'],
                 'excluded_days'       => $validated['excluded_days'] ?? [],
                 'is_stepwise'         => $validated['is_stepwise'],
                 'stepwise_rules'      => $validated['stepwise_rules'] ?? [],
             ]);
 
             $departmentIds = ($validated['department'] === 'all')
                 ? $business->departments()->pluck('id')->toArray()
                 : [Department::findBySlug($validated['department'])->id];
 
             $jobCategoryIds = ($validated['job_category'] === 'all')
                 ? $business->jobCategories()->pluck('id')->toArray()
                 : [JobCategory::findBySlug($validated['job_category'])->id];
 
             $gender = $validated['gender_applicable'] === 'all'
                 ? 'all'
                 : $validated['gender_applicable'];
 
             foreach ($departmentIds as $departmentId) {
                 foreach ($jobCategoryIds as $jobCategoryId) {
-                    $leaveType->leavePolicies()->create([
+                    // guard against duplicates on initial create (if run twice)
+                    LeavePolicy::firstOrCreate([
+                        'leave_type_id'   => $leaveType->id,
+                        'department_id'   => $departmentId,
+                        'job_category_id' => $jobCategoryId,
+                        'gender_applicable' => $gender,
+                    ], [
                         'department_id'                 => $departmentId,
                         'job_category_id'               => $jobCategoryId,
                         'gender_applicable'             => $gender,
                         'prorated_for_new_employees'    => $validated['prorated_for_new_employees'],
                         'default_days'                  => $validated['default_days'],
                         'accrual_frequency'             => $validated['accrual_frequency'],
                         'accrual_amount'                => $validated['accrual_amount'],
                         'max_carryover_days'            => $validated['max_carryover_days'],
                         'minimum_service_days_required' => $validated['minimum_service_days_required'],
                         'effective_date'                => $validated['effective_date'],
                         'end_date'                      => $validated['end_date'] ?? null,
-                    ]);
+                    ]);
                 }
             }
 
             return RequestResponse::created('Leave type and policies created successfully.');
         });
     }
@@ -121,6 +137,7 @@ class LeaveTypeController extends Controller
         return RequestResponse::ok('Leave type fetched successfully.', $leaveTypeDetails);
     }
 
     public function update(Request $request)
     {
         $slug = $request->input('leave_type_slug')
             ?? $request->input('slug')
             ?? $request->input('leave');
@@ -141,6 +158,7 @@ class LeaveTypeController extends Controller
         $businessId = $leaveType->business_id;
 
         // Only validate fields that are present (PATCH semantics)
         $rules = [
             'name'   => [
                 'sometimes','filled','string','max:190',
                 Rule::unique('leave_types','name')
                     ->where(fn($q)=>$q->where('business_id',$businessId))
                     ->ignore($leaveType->id),
             ],
             'description' => ['sometimes','nullable','string'],
             'requires_approval' => ['sometimes','in:0,1'],
             'is_paid' => ['sometimes','in:0,1'],
             'allowance_accruable' => ['sometimes','in:0,1'],
             'allows_half_day' => ['sometimes','in:0,1'],
             'requires_attachment' => ['sometimes','in:0,1'],
             'max_continuous_days' => ['sometimes','nullable','numeric','min:0'],
             'min_notice_days'     => ['sometimes','nullable','integer','min:0'],
             'allows_backdating'   => ['sometimes','in:0,1'],
             'approval_levels'     => ['sometimes','nullable','integer','min:0'],
             'is_stepwise'         => ['sometimes','in:0,1'],
             'excluded_days'       => ['sometimes','array'],
             'excluded_days.*'     => ['in:monday,tuesday,wednesday,thursday,friday,saturday,sunday'],
 
             // Policy-ish fields (handled later if you manage LeavePolicy)
             'department'     => ['sometimes','filled','string'],
             'job_category'   => ['sometimes','filled','string'],
             'gender_applicable' => ['sometimes','in:all,male,female'],
             'prorated_for_new_employees' => ['sometimes','in:0,1'],
             'default_days'   => ['sometimes','nullable','numeric','min:0'],
             'accrual_frequency' => ['sometimes','in:monthly,quarterly,yearly'],
             'accrual_amount' => ['sometimes','nullable','numeric','min:0'],
             'max_carryover_days' => ['sometimes','nullable','numeric','min:0'],
             'minimum_service_days_required' => ['sometimes','nullable','integer','min:0'],
             'effective_date' => ['sometimes','nullable','date'],
             'end_date'       => ['sometimes','nullable','date','after_or_equal:effective_date'],
         ];
 
         $data = $request->validate($rules);
 
         // If name changes, optionally adjust slug (and keep unique per business)
         if (array_key_exists('name', $data) && $data['name'] !== $leaveType->name) {
             $newSlug = Str::slug($data['name']);
             $exists = \App\Models\LeaveType::where('business_id',$businessId)
                 ->where('slug',$newSlug)
                 ->where('id','!=',$leaveType->id)
                 ->exists();
             if ($exists) {
                 return RequestResponse::badRequest('Another leave type with a similar name already exists.');
             }
             $data['slug'] = $newSlug;
         }
 
         foreach ([
             'requires_approval','is_paid','allowance_accruable','allows_half_day',
             'requires_attachment','prorated_for_new_employees','allows_backdating','is_stepwise'
         ] as $boolField) {
             if (array_key_exists($boolField, $data)) {
                 $data[$boolField] = (int) (string) $data[$boolField] === '1';
             }
         }
 
-        // Apply to main LeaveType
-        $leaveType->fill($data);
-
-        if (array_key_exists('excluded_days', $data)) {
-            $leaveType->excluded_days = array_values(array_unique(array_map('strtolower', $data['excluded_days'] ?? [])));
-        }
-
-        $leaveType->save();
-
-        // TODO: if you update LeavePolicy here, sync with $data[...] as needed.
-
-        return RequestResponse::ok('Leave type updated successfully.');
+        DB::beginTransaction();
+        try {
+            // Apply to main LeaveType
+            $leaveType->fill($data);
+
+            if (array_key_exists('excluded_days', $data)) {
+                $leaveType->excluded_days = array_values(array_unique(array_map('strtolower', $data['excluded_days'] ?? [])));
+            }
+
+            $leaveType->save();
+
+            /**
+             * === Policy UPSERT (department/job_category/gender) ===
+             * Mirrors create flow: "all" expands to all dept/jobCategory combos.
+             * No duplicates: firstOrCreate + save.
+             */
+            $policyKeysPresent = collect([
+                'department','job_category','gender_applicable',
+                'prorated_for_new_employees','default_days','accrual_frequency','accrual_amount',
+                'max_carryover_days','minimum_service_days_required','effective_date','end_date'
+            ])->some(fn($k) => $request->has($k));
+
+            if ($policyKeysPresent) {
+                $biz = Business::find($businessId);
+                $deptParam = $request->input('department', 'all');
+                $jobcParam = $request->input('job_category', 'all');
+                $gender    = $request->input('gender_applicable','all');
+                if (!in_array($gender, ['all','male','female'], true)) {
+                    DB::rollBack();
+                    return RequestResponse::badRequest('Invalid gender_applicable value.');
+                }
+
+                $deptIds = [];
+                if ($deptParam === 'all') {
+                    $deptIds = $biz->departments()->pluck('id')->toArray();
+                } else {
+                    $dept = Department::where('business_id',$businessId)->where('slug',$deptParam)->first();
+                    if (!$dept) {
+                        DB::rollBack();
+                        return RequestResponse::badRequest('Selected department not found for this business.');
+                    }
+                    $deptIds = [$dept->id];
+                }
+
+                $jobcIds = [];
+                if ($jobcParam === 'all') {
+                    $jobcIds = $biz->jobCategories()->pluck('id')->toArray();
+                } else {
+                    $jc = JobCategory::where('business_id',$businessId)->where('slug',$jobcParam)->first();
+                    if (!$jc) {
+                        DB::rollBack();
+                        return RequestResponse::badRequest('Selected job category not found for this business.');
+                    }
+                    $jobcIds = [$jc->id];
+                }
+
+                // Collect values to set (only those provided)
+                $policyFill = [];
+                foreach ([
+                    'prorated_for_new_employees','default_days','accrual_frequency','accrual_amount',
+                    'max_carryover_days','minimum_service_days_required','effective_date','end_date'
+                ] as $f) {
+                    if ($request->has($f)) {
+                        $policyFill[$f] = $request->input($f);
+                    }
+                }
+                if (array_key_exists('prorated_for_new_employees',$policyFill)) {
+                    $policyFill['prorated_for_new_employees'] = (int)(string)$policyFill['prorated_for_new_employees'] === '1';
+                }
+
+                foreach ($deptIds as $dId) {
+                    foreach ($jobcIds as $jId) {
+                        $policy = LeavePolicy::firstOrCreate(
+                            [
+                                'leave_type_id'   => $leaveType->id,
+                                'department_id'   => $dId,
+                                'job_category_id' => $jId,
+                                'gender_applicable' => $gender,
+                            ],
+                            [] // set below via fill()
+                        );
+
+                        $policy->department_id = $dId;
+                        $policy->job_category_id = $jId;
+                        $policy->gender_applicable = $gender;
+                        if (!empty($policyFill)) {
+                            $policy->fill($policyFill);
+                        }
+                        $policy->save();
+                    }
+                }
+            }
+
+            DB::commit();
+        } catch (\Throwable $e) {
+            DB::rollBack();
+            Log::error('LeaveType update failed: '.$e->getMessage(), ['trace' => $e->getTraceAsString()]);
+            return RequestResponse::badRequest('Failed to update leave type. Please try again.');
+        }
+
+        return RequestResponse::ok('Leave type updated successfully.');
     }
 
 
     public function destroy(Request $request)
     {
         $validated = $request->validate([
             'leave_type_slug' => 'required|string|exists:leave_types,slug',
diff --git a/resources/views/leave/Types.blade.php b/resources/views/leave/Types.blade.php
index f4b1a3d..aa7c8a1 100644
--- a/resources/views/leave/Types.blade.php
+++ b/resources/views/leave/Types.blade.php
@@ -1,6 +1,7 @@
 <x-app-layout>
     <div class="row g-20">
 
         <div class="col-md-6">
             <div class="card">
                 <div class="card-body">
                     <form action="" method="post" id="leaveTypeForm">
+                        @csrf
 
                         <div class="form-group mb-3">
                             <label for="name">Name</label>
@@ -62,7 +63,7 @@
                             <div class="col-md-12">
                                 <label for="min_notice_days">Min notice days</label>
                                 <input type="number" name="min_notice_days" id="min_notice_days" 
-                                class="form-control" min="0" oninput="validity.valid||(value='');">
+                                class="form-control" min="0" oninput="validity.valid||(value='');" required>
                             </div>
                         </div>
 
@@ -125,7 +126,7 @@
                             <div class="col-md-6">
                                 <label for="accrual_amount">Accrual amount</label>
                                 <input type="number" name="accrual_amount" id="accrual_amount"
-                                    class="form-control">
+                                    class="form-control" step="0.01" min="0" oninput="validity.valid||(value='');" required>
                             </div>
 
                             <div class="col-md-6">
@@ -143,18 +144,18 @@
                             </div>
 
                             <div class="col-md-6">
                                 <label for="effective_date">Effective date</label>
                                 <input type="date" class="form-control datepicker" id="effective_date"
-                                    name="effective_date" required min="{{ date('Y-m-d') }}">
+                                    name="effective_date" required>
                             </div>
 
                                 <div class="col-md-6">
                                 <label for="end_date">End date</label>
                                 <input type="date" class="form-control datepicker" id="end_date" name="end_date"
-                                    required min="{{ date('Y-m-d') }}">
+                                    min="{{ date('Y-m-d') }}">
                             </div>
                         
@@ -209,6 +210,7 @@
         @include('modals.leave-type')
         <script src="{{ asset('js/main/leave-type.js') }}" type="module"></script>
 
         <script>
             document.addEventListener('DOMContentLoaded', function() {
                 if (typeof getLeaveType === 'function') {
                     getLeaveType();
                 }
                 const input = document.getElementById('name');
                 const availableTypes = @json(getLeaveTypeNames());
 
                 if (typeof $ !== 'undefined' && $.fn.autocomplete) {
                     $('#name').autocomplete({
                         source: availableTypes,
                         minLength: 1,
                     });
                 } else {
                     console.error('jQuery or jQuery UI is not loaded. Autocomplete will not work.');
                 }
             });
         </script>
     @endpush
 
 </x-app-layout>
diff --git a/resources/views/leave/_leave_type_details.blade.php b/resources/views/leave/_leave_type_details.blade.php
new file mode 100644
index 0000000..b6a4c31
--- /dev/null
+++ b/resources/views/leave/_leave_type_details.blade.php
@@ -0,0 +1,85 @@
+@php
+    $lt = $leaveType;
+@endphp
+<div class="container-fluid">
+    <h5 class="mb-3">{{ $lt->name }}</h5>
+
+    <div class="row g-3">
+        <div class="col-md-6">
+            <div class="card">
+                <div class="card-body">
+                    <h6 class="mb-2">General</h6>
+                    <dl class="row mb-0">
+                        <dt class="col-6">Description</dt>
+                        <dd class="col-6">{{ $lt->description ?: '—' }}</dd>
+
+                        <dt class="col-6">Requires Approval</dt>
+                        <dd class="col-6">{{ $lt->requires_approval ? 'Yes' : 'No' }}</dd>
+
+                        <dt class="col-6">Is Paid</dt>
+                        <dd class="col-6">{{ $lt->is_paid ? 'Yes' : 'No' }}</dd>
+
+                        <dt class="col-6">Allowance Accruable</dt>
+                        <dd class="col-6">{{ $lt->allowance_accruable ? 'Yes' : 'No' }}</dd>
+
+                        <dt class="col-6">Allows Half Day</dt>
+                        <dd class="col-6">{{ $lt->allows_half_day ? 'Yes' : 'No' }}</dd>
+
+                        <dt class="col-6">Requires Attachment</dt>
+                        <dd class="col-6">{{ $lt->requires_attachment ? 'Yes' : 'No' }}</dd>
+
+                        <dt class="col-6">Max Continuous Days</dt>
+                        <dd class="col-6">{{ $lt->max_continuous_days ?? '—' }}</dd>
+
+                        <dt class="col-6">Min Notice Days</dt>
+                        <dd class="col-6">{{ $lt->min_notice_days ?? '—' }}</dd>
+
+                        <dt class="col-6">Excluded Days</dt>
+                        <dd class="col-6">
+                            @php $ex = is_array($lt->excluded_days) ? $lt->excluded_days : []; @endphp
+                            {{ empty($ex) ? '—' : implode(', ', array_map('ucfirst',$ex)) }}
+                        </dd>
+
+                        <dt class="col-6">Allows Backdating</dt>
+                        <dd class="col-6">{{ $lt->allows_backdating ? 'Yes' : 'No' }}</dd>
+
+                        <dt class="col-6">Approval Levels</dt>
+                        <dd class="col-6">{{ $lt->approval_levels ?? 0 }}</dd>
+
+                        <dt class="col-6">Stepwise</dt>
+                        <dd class="col-6">{{ $lt->is_stepwise ? 'Yes' : 'No' }}</dd>
+                    </dl>
+                </div>
+            </div>
+        </div>
+
+        <div class="col-md-6">
+            <div class="card">
+                <div class="card-body">
+                    <h6 class="mb-2">Policies</h6>
+                    @if($lt->leavePolicies->isEmpty())
+                        <p class="text-muted mb-0">No policies defined.</p>
+                    @else
+                        <div class="table-responsive">
+                            <table class="table table-sm align-middle mb-0">
+                                <thead>
+                                    <tr>
+                                        <th>Department</th>
+                                        <th>Job Category</th>
+                                        <th>Gender</th>
+                                        <th>Default Days</th>
+                                        <th>Accrual</th>
+                                        <th>Carryover</th>
+                                        <th>Effective</th>
+                                        <th>End</th>
+                                    </tr>
+                                </thead>
+                                <tbody>
+                                @foreach($lt->leavePolicies as $p)
+                                    <tr>
+                                        <td>{{ $p->department->name ?? 'All' }}</td>
+                                        <td>{{ $p->jobCategory->name ?? 'All' }}</td>
+                                        <td>{{ ucfirst($p->gender_applicable ?? 'all') }}</td>
+                                        <td>{{ $p->default_days }}</td>
+                                        <td>{{ $p->accrual_frequency }} ({{ $p->accrual_amount }})</td>
+                                        <td>{{ $p->max_carryover_days }}</td>
+                                        <td>{{ optional($p->effective_date)->format('Y-m-d') }}</td>
+                                        <td>{{ optional($p->end_date)->format('Y-m-d') ?: '—' }}</td>
+                                    </tr>
+                                @endforeach
+                                </tbody>
+                            </table>
+                        </div>
+                    @endif
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
